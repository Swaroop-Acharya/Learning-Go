package main

import (
	"fmt"
	"strings"
)

// Helper Print Function
func printSlice(name string, s []int) {
	fmt.Printf("%s -> len=%d cap=%d %v\n", name, len(s), cap(s), s)
}

// Arrays in Go
func arrayBasics() {
	fmt.Println("\n--- Array Basics ---")
	var a [2]string
	a[0] = "Swaroop"
	a[1] = "Acharya"
	fmt.Println(a)

	nums := [4]int{1, 2, 3, 4}
	fmt.Println(nums)
}

// Slice Basics (Reference to Array)
func sliceBasics() {
	fmt.Println("\n--- Slice Basics ---")
	evens := [6]int{2, 4, 6, 8, 10, 12}
	s := evens[1:4] // slice of evens
	fmt.Println(s)

	names := [4]string{"S", "W", "T", "K"}
	s1 := names[0:2]
	s2 := names[1:3]
	s2[0] = "XXX"
	fmt.Println(s1, s2)
	fmt.Println(names) // underlying array modified
}

// Slice Literals
func sliceLiteralsDemo() {
	fmt.Println("\n--- Slice Literals ---")
	b := []bool{false, true, false}
	fmt.Println(b)

	st := []struct {
		i int
		b bool
	}{
		{1, true},
		{2, false},
		{3, true},
	}
	fmt.Println(st)
}

// Slice Defaults [:], [:b], [a:]
func sliceDefaults() {
	fmt.Println("\n--- Slice Default Expressions ---")
	s := []int{2, 3, 5, 7, 11, 13}
	fmt.Println("Full:", s)
	fmt.Println("1:4 ->", s[1:4])
	fmt.Println(":3  ->", s[:3])
	fmt.Println("2:   ->", s[2:])
}

// Slice Length & Capacity
func sliceLenCap() {
	fmt.Println("\n--- Slice Length & Capacity ---")
	sl := []int{1, 2, 3, 4, 5}
	printSlice("sl", sl)

	sl = sl[:0]
	printSlice("sl[:0]", sl)

	sl = sl[:4]
	printSlice("sl[:4]", sl)

	sl = sl[2:]
	printSlice("sl[2:]", sl)
}

// Slice using make()
func sliceMakeDemo() {
	fmt.Println("\n--- make() for Slices ---")
	a1 := make([]int, 5) // len=5, cap=5
	printSlice("a1", a1)

	b1 := make([]int, 0, 5) // len=0, cap=5
	printSlice("b1", b1)

	c1 := a1[:2]
	printSlice("c1", c1)
}

// 2D Slice Example
func sliceOfSlices() {
	fmt.Println("\n--- 2D Slice (Tic Tac Toe) ---")
	board := [][]string{
		{"_", "_", "_"},
		{"_", "_", "_"},
		{"_", "_", "_"},
	}

	board[0][1] = "X"
	board[2][2] = "O"

	for _, row := range board {
		fmt.Println(strings.Join(row, " "))
	}
}

// Append to Slice
func appendDemo() {
	fmt.Println("\n--- Append Demo ---")
	var s []int
	printSlice("nil", s)

	s = append(s, 0)
	printSlice("append 0", s)

	s = append(s, 1)
	printSlice("append 1", s)

	s = append(s, 2, 3, 4)
	printSlice("append 2,3,4", s)
}

// Main â€“ Call All Demos
func main() {
	arrayBasics()
	sliceBasics()
	sliceLiteralsDemo()
	sliceDefaults()
	sliceLenCap()
	sliceMakeDemo()
	sliceOfSlices()
	appendDemo()
}
